require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

console.log("‚úÖ NeuroFox –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...");

const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userMessage = msg.text;

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—Ä–æ–¥–µ /start –∏ /donate
  if (!userMessage || userMessage.startsWith('/')) return;

  bot.sendChatAction(chatId, 'typing');

  try {
    const response = await axios.post('https://openrouter.ai/api/v1/chat/completions', {
      model: "openrouter/openai/gpt-3.5-turbo",
      messages: [{ role: "user", content: userMessage }]
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': 'https://t.me/neurofox_assistant_bot',
        'X-Title': 'NeuroFox AI Assistant'
      }
    });

    const reply = response.data.choices?.[0]?.message?.content || "‚ùå –ò–ò –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞.";
    bot.sendMessage(chatId, reply);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error?.response?.data || error.message);
    bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.');
  }
});

// === /donate ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É Kaspi
bot.onText(/\/donate/, (msg) => {
  const chatId = msg.chat.id;

  bot.sendMessage(chatId, "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ Kaspi:", {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üí≥ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ Kaspi", url: "https://kaspi.kz/transfer/Mako-top" }
        ]
      ]
    }
  });
});

console.log("‚úÖ NeuroFox —Å Kaspi-–¥–æ–Ω–∞—Ç–æ–º –∑–∞–ø—É—â–µ–Ω!");
