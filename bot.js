const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
require('dotenv').config();

console.log("‚úÖ NeuroFox –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...");

const chatHistory = {};
const userModel = {};
const userLimit = {};

const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });

// === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ DetectLanguage API
async function getLanguage(text) {
  try {
    const res = await axios.post('https://ws.detectlanguage.com/0.2/detect', {
      q: text
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.DETECTLANGUAGE_API_KEY}`
      }
    });

    const langCode = res.data.data.detections[0]?.language || 'en';
    const langNames = {
      en: "English", ru: "Russian", fr: "French", es: "Spanish",
      zh: "Chinese", de: "German", it: "Italian", tr: "Turkish",
      ja: "Japanese", ar: "Arabic", kk: "Kazakh"
    };
    return langNames[langCode] || "English";
  } catch (err) {
    console.error("üîç –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞:", err.message);
    return 'English';
  }
}

// === –ö–Ω–æ–ø–∫–∏
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  if (data === 'help') {
    return bot.sendMessage(chatId, `ü§ñ *–ü–æ–º–æ—â—å*\n\n–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç ‚Äî –∏ —è –æ—Ç–≤–µ—á—É!\n\n/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å\n!model gpt-4 ‚Äî —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å\n!limit 1500 ‚Äî –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞`, { parse_mode: 'Markdown' });
  }

  if (data === 'clear') {
    chatHistory[chatId] = [];
    return bot.sendMessage(chatId, `üßπ *–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞.*`, { parse_mode: 'Markdown' });
  }

  if (data === 'gpt4') {
    userModel[chatId] = "openai/gpt-4";
    return bot.sendMessage(chatId, `üîÅ *–ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ GPT-4*`, { parse_mode: 'Markdown' });
  }
});

// === –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userMessage = msg.text;
  if (!userMessage) return;

  if (userMessage === '/clear') {
    chatHistory[chatId] = [];
    return bot.sendMessage(chatId, "üßπ *–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.*", { parse_mode: 'Markdown' });
  }

  if (userMessage.startsWith('!model ')) {
    const modelName = userMessage.split(' ')[1]?.trim();

    const allowedModels = [
      "openai/gpt-3.5-turbo",
      "openai/gpt-4",
      "mistralai/mistral-7b-instruct",
      "anthropic/claude-3-opus",
      "meta-llama/llama-3-70b-instruct"
    ];

    if (allowedModels.includes(modelName)) {
      userModel[chatId] = modelName;
      return bot.sendMessage(chatId, `‚úÖ *–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:* \`${modelName}\``, { parse_mode: 'Markdown' });
    } else {
      return bot.sendMessage(chatId, `‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n*–î–æ—Å—Ç—É–ø–Ω—ã–µ:*\n${allowedModels.map(m => `- \`${m}\``).join('\n')}`, { parse_mode: 'Markdown' });
    }
  }

  if (userMessage.startsWith('!limit ')) {
    const limit = parseInt(userMessage.split(' ')[1]);

    if (!isNaN(limit) && limit > 100 && limit <= 4096) {
      userLimit[chatId] = limit;
      return bot.sendMessage(chatId, `üìè *–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:* \`${limit}\``, { parse_mode: 'Markdown' });
    } else {
      return bot.sendMessage(chatId, "‚ö†Ô∏è –£–∫–∞–∂–∏ —á–∏—Å–ª–æ –æ—Ç 100 –¥–æ 4096, –Ω–∞–ø—Ä–∏–º–µ—Ä: `!limit 1500`", { parse_mode: 'Markdown' });
    }
  }

  handleTextMessage(msg);
});

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò
async function handleTextMessage(msg) {
  const chatId = msg.chat.id;
  const userMessage = msg.text;

  if (!chatHistory[chatId]) chatHistory[chatId] = [];
  if (!userModel[chatId]) userModel[chatId] = "openai/gpt-3.5-turbo";

  // üß† –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const languageName = await getLanguage(userMessage);

  // üßº –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é system-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –∑–∞–¥–∞—ë–º –Ω–æ–≤—É—é
  chatHistory[chatId] = chatHistory[chatId].filter(m => m.role !== 'system');
  chatHistory[chatId].unshift({
    role: 'system',
    content: `You are a helpful assistant. Always reply in ${languageName}.`
  });

  chatHistory[chatId].push({ role: 'user', content: userMessage });

  // üß† –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
  if (chatHistory[chatId].length > 10) {
    chatHistory[chatId] = chatHistory[chatId].slice(-10);
  }

  bot.sendChatAction(chatId, 'typing');

  try {
    const response = await axios.post('https://openrouter.ai/api/v1/chat/completions', {
      model: userModel[chatId],
      messages: chatHistory[chatId],
      max_tokens: userLimit[chatId] || 500
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': 'https://t.me/neurofox_assistant_bot',
        'X-Title': 'NeuroFox AI Assistant'
      }
    });

    const reply = response.data.choices?.[0]?.message?.content || "ü§ñ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞.";
    chatHistory[chatId].push({ role: 'assistant', content: reply });

    bot.sendMessage(chatId, reply, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: "ü§ñ –ü–æ–º–æ—â—å", callback_data: "help" },
            { text: "üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data: "clear" },
            { text: "üîÅ GPT-4", callback_data: "gpt4" }
          ]
        ]
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ OpenRouter:', error?.response?.data || error.message);
    bot.sendMessage(chatId, '‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ò–ò.*', { parse_mode: 'Markdown' });
  }
}

console.log("‚úÖ NeuroFox —Å –∞–≤—Ç–æ—è–∑—ã–∫–æ–º –∑–∞–ø—É—â–µ–Ω!");
