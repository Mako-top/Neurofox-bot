require('dotenv').config();

const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

console.log("‚úÖ NeuroFox –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...");

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç —Å polling
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });

// –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
const keyboard = {
  reply_markup: {
    keyboard: [
      [{ text: "Clear —á–∞—Ç" }],
      [{ text: "–ü–æ–º–æ—â—å" }],
      [{ text: "–û –±–æ—Ç–µ" }],
    ],
    resize_keyboard: true,
    one_time_keyboard: false,
  }
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const chatHistory = {};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter API (ChatGPT)
async function getAIResponse(messages) {
  try {
    const response = await axios.post('https://openrouter.ai/api/v1/chat/completions', {
      model: "openrouter/openai/gpt-4o-mini",
      messages,
      max_tokens: 1000,
      temperature: 0.7
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    return response.data.choices[0].message.content;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò:', error.response?.data || error.message);
    return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò.";
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;

  if (!text) return;

  // –ö–æ–º–∞–Ω–¥—ã
  if (text === "/start") {
    await bot.sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø NeuroFox ‚Äî —Ç–≤–æ–π –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É!", keyboard);
    chatHistory[userId] = [];
    return;
  }

  if (text === "Clear —á–∞—Ç") {
    chatHistory[userId] = [];
    await bot.sendMessage(chatId, "üßπ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞.", keyboard);
    return;
  }

  if (text === "–ü–æ–º–æ—â—å") {
    await bot.sendMessage(chatId,
      "üõ†Ô∏è –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n" +
      "- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n" +
      "- –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞\n" +
      "- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–Ω–æ–ø–æ–∫\n" +
      "- –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞\n\n" +
      "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.",
      keyboard);
    return;
  }

  if (text === "–û –±–æ—Ç–µ") {
    await bot.sendMessage(chatId,
      "NeuroFox ‚Äî –ò–ò-–±–æ—Ç –Ω–∞ –±–∞–∑–µ OpenRouter API –∏ Telegram.\n" +
      "–°–æ–∑–¥–∞–Ω —Å –ª—é–±–æ–≤—å—é –¥–ª—è –ø–æ–º–æ—â–∏ —Ç–µ–±–µ.",
      keyboard);
    return;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
  if (!chatHistory[userId]) chatHistory[userId] = [];
  chatHistory[userId].push({ role: "user", content: text });

  await bot.sendChatAction(chatId, 'typing');

  // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
  const aiResponse = await getAIResponse(chatHistory[userId]);

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
  chatHistory[userId].push({ role: "assistant", content: aiResponse });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  await bot.sendMessage(chatId, aiResponse, { parse_mode: 'Markdown', reply_markup: keyboard });
});

console.log("‚úÖ NeuroFox –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É —Å–æ–æ–±—â–µ–Ω–∏–π...");
